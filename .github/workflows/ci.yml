name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat-ci ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build-type: [debug, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Set up compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        fi
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure with CMake
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ..
    
    - name: Build project
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        make run-all-tests
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.compiler }}-${{ matrix.build-type }}
        path: build/bin/
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
    
    - name: Run static analysis
      run: |
        cppcheck --enable=all --error-exitcode=1 src/
    
    - name: Check code formatting
      run: |
        # Verificar que no hay líneas muy largas
        find src/ -name "*.cpp" -exec grep -l ".\{120,\}" {} \; | wc -l | grep -q "^0$" || (echo "Líneas muy largas encontradas" && exit 1)

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 