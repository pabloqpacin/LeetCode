name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat-ci ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build-type: [debug, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
    
    - name: Set up compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        fi
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure with CMake
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ..
    
    - name: Build project
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        make run-all-tests
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.compiler }}-${{ matrix.build-type }}
        path: build/bin/
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
    
    - name: Run static analysis
      run: |
        # Configuraci√≥n mejorada de cppcheck
        cppcheck \
          --enable=all \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=missingInclude \
          --error-exitcode=1 \
          --inline-suppr \
          --xml-version=2 \
          src/
    
    - name: Check code formatting
      run: |
        # Verificar que no hay l√≠neas muy largas
        find src/ -name "*.cpp" -exec grep -l ".\{120,\}" {} \; | wc -l | grep -q "^0$" || (echo "L√≠neas muy largas encontradas" && exit 1)

        # Verificar que no hay tabs (solo espacios)
        find src/ -name "*.cpp" -exec grep -l $'\t' {} \; | wc -l | grep -q "^0$" || (echo "Tabs encontrados, usar espacios" && exit 1)

        # Verificar que los archivos terminan con newline
        find src/ -name "*.cpp" -exec sh -c 'tail -c1 "$1" | wc -l | grep -q "^1$"' _ {} \; || (echo "Archivos sin newline al final" && exit 1)

  security-scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # No fallar el pipeline completo
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
    
    - name: Run basic security checks
      run: |
        echo "üîç Ejecutando verificaciones de seguridad b√°sicas..."

        # Verificar que no hay credenciales hardcodeadas
        echo "Verificando credenciales hardcodeadas..."
        if grep -r -i "password\|secret\|key\|token" src/ 2>/dev/null; then
          echo "‚ö†Ô∏è  Posibles credenciales encontradas en el c√≥digo"
        else
          echo "‚úÖ No se encontraron credenciales hardcodeadas"
        fi

        # Verificar que no hay URLs hardcodeadas
        echo "Verificando URLs hardcodeadas..."
        if grep -r "http://\|https://" src/ 2>/dev/null; then
          echo "‚ö†Ô∏è  URLs hardcodeadas encontradas"
        else
          echo "‚úÖ No se encontraron URLs hardcodeadas"
        fi

        # Verificar permisos de archivos
        echo "Verificando permisos de archivos..."
        find src/ -type f -exec ls -la {} \; | grep -v "644\|664" && echo "‚ö†Ô∏è  Permisos de archivo inusuales" || echo "‚úÖ Permisos de archivo correctos"

        echo "‚úÖ Verificaciones de seguridad completadas"
